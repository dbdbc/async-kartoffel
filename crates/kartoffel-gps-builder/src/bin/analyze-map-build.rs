use std::path::Path;

use async_kartoffel::Vec2;
use kartoffel_gps::{map::TrueMap, GlobalPos};
use kartoffel_gps_builder::map::Map;

fn main() {
    let map = Map::from_path(Path::new("./maps/map.txt")).unwrap();
    let builder = map.builder();
    println!("const TRUE_MAP: {} = {};\n", builder.type_string(), builder);

    assert!(map.width == usize::from(TRUE_MAP.width()));
    assert!(map.height == usize::from(TRUE_MAP.height()));

    for i_east in 0..map.width {
        for i_south in 0..map.height {
            let pos = GlobalPos::default()
                + Vec2::new_east(i_east as i16)
                + Vec2::new_south(i_south as i16);
            assert!(map.get(pos) == TRUE_MAP.get(pos));
        }
    }
    println!("completed successfully");
}

const TRUE_MAP: ::kartoffel_gps::map::TrueMapImpl<128, 64, 1024> =
    ::kartoffel_gps::map::TrueMapImpl::<128, 64, 1024>([
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 7, 252, 31, 0, 0, 252, 0, 0, 0,
        254, 143, 255, 1, 0, 0, 248, 15, 254, 63, 0, 0, 254, 1, 96, 240, 255, 255, 253, 3, 2, 0,
        254, 31, 255, 63, 0, 0, 254, 1, 240, 248, 255, 127, 252, 3, 7, 0, 255, 255, 255, 127, 0, 0,
        255, 0, 240, 255, 243, 63, 248, 7, 14, 0, 255, 255, 63, 255, 0, 0, 255, 0, 240, 31, 224,
        63, 224, 7, 12, 120, 254, 255, 31, 254, 1, 128, 127, 0, 240, 15, 224, 127, 192, 7, 8, 252,
        252, 255, 15, 252, 1, 192, 127, 0, 240, 7, 240, 127, 128, 7, 56, 252, 248, 255, 15, 128, 0,
        224, 127, 0, 248, 111, 248, 63, 0, 7, 120, 248, 240, 207, 7, 0, 0, 240, 63, 128, 255, 255,
        252, 63, 0, 7, 124, 248, 240, 231, 3, 0, 0, 240, 31, 224, 255, 255, 255, 63, 128, 15, 124,
        248, 240, 227, 1, 0, 0, 240, 15, 254, 255, 199, 255, 127, 128, 31, 62, 248, 249, 243, 1, 0,
        0, 240, 7, 255, 255, 135, 255, 127, 128, 63, 31, 248, 255, 241, 3, 60, 0, 192, 7, 255, 255,
        135, 255, 127, 128, 255, 15, 248, 63, 240, 7, 126, 0, 128, 7, 206, 252, 195, 255, 127, 128,
        255, 1, 248, 63, 240, 15, 126, 0, 128, 15, 4, 248, 231, 255, 127, 192, 255, 0, 252, 103,
        224, 31, 124, 0, 192, 15, 0, 252, 255, 255, 63, 248, 7, 0, 254, 227, 128, 31, 124, 0, 224,
        15, 0, 255, 255, 255, 15, 252, 3, 0, 254, 225, 0, 31, 254, 0, 224, 15, 128, 255, 255, 255,
        1, 254, 3, 3, 254, 112, 0, 31, 255, 0, 192, 15, 128, 255, 255, 63, 0, 124, 128, 7, 252, 48,
        128, 159, 255, 0, 192, 255, 0, 255, 255, 31, 112, 56, 192, 7, 248, 121, 192, 255, 127, 0,
        192, 255, 1, 126, 254, 15, 248, 112, 252, 3, 240, 255, 231, 255, 127, 0, 192, 255, 1, 60,
        252, 7, 252, 241, 255, 0, 224, 255, 255, 255, 255, 0, 192, 255, 0, 28, 248, 3, 254, 255,
        127, 0, 224, 255, 255, 255, 255, 0, 128, 255, 0, 0, 240, 0, 254, 255, 127, 0, 224, 255,
        207, 255, 255, 25, 0, 255, 0, 0, 96, 0, 236, 255, 63, 0, 240, 255, 135, 255, 255, 31, 0,
        254, 15, 0, 64, 0, 192, 255, 31, 0, 248, 255, 135, 255, 255, 15, 0, 254, 63, 0, 96, 0, 192,
        255, 31, 0, 248, 255, 7, 255, 255, 7, 0, 255, 255, 231, 243, 0, 224, 255, 63, 0, 248, 240,
        15, 199, 255, 3, 240, 255, 255, 255, 255, 63, 240, 255, 255, 0, 0, 224, 159, 199, 255, 0,
        248, 255, 255, 255, 255, 255, 252, 255, 249, 7, 0, 0, 254, 199, 127, 0, 248, 227, 255, 255,
        255, 255, 255, 255, 240, 15, 0, 0, 254, 239, 127, 0, 248, 225, 255, 255, 255, 255, 255,
        255, 240, 7, 0, 0, 254, 255, 255, 0, 120, 224, 255, 255, 255, 227, 255, 255, 249, 0, 0,
        192, 255, 255, 243, 1, 48, 248, 255, 255, 255, 193, 159, 255, 127, 0, 0, 224, 255, 255,
        225, 3, 0, 252, 255, 255, 249, 193, 15, 207, 127, 0, 0, 240, 255, 255, 225, 7, 0, 254, 255,
        255, 240, 128, 15, 6, 252, 0, 0, 248, 255, 255, 193, 15, 0, 255, 255, 127, 0, 0, 15, 12,
        240, 49, 0, 248, 255, 255, 131, 15, 240, 127, 248, 31, 0, 0, 15, 60, 224, 127, 0, 240, 255,
        255, 131, 15, 248, 63, 224, 15, 0, 0, 14, 62, 224, 127, 0, 224, 255, 255, 199, 31, 252, 31,
        0, 15, 0, 0, 12, 63, 224, 127, 0, 128, 231, 255, 135, 31, 252, 31, 0, 14, 0, 0, 156, 15,
        192, 127, 0, 0, 192, 255, 3, 63, 252, 31, 24, 4, 0, 0, 252, 7, 0, 127, 0, 0, 192, 255, 3,
        127, 254, 31, 60, 0, 0, 0, 252, 3, 0, 126, 0, 0, 198, 255, 129, 255, 255, 63, 63, 0, 128,
        1, 252, 3, 0, 124, 0, 0, 127, 62, 192, 255, 255, 255, 255, 0, 192, 3, 254, 195, 56, 120, 0,
        0, 63, 28, 192, 255, 255, 255, 223, 127, 224, 255, 159, 225, 127, 120, 0, 0, 63, 28, 248,
        255, 152, 255, 15, 255, 255, 255, 15, 224, 255, 124, 0, 0, 124, 30, 252, 127, 128, 255, 7,
        255, 255, 255, 15, 224, 255, 127, 0, 0, 248, 127, 252, 31, 128, 127, 0, 255, 255, 231, 15,
        192, 255, 127, 0, 0, 248, 255, 255, 31, 192, 63, 0, 255, 255, 195, 31, 128, 243, 127, 0,
        24, 252, 255, 255, 255, 224, 63, 128, 255, 255, 195, 63, 0, 224, 63, 0, 60, 254, 255, 255,
        255, 249, 31, 192, 255, 255, 199, 127, 0, 224, 63, 0, 252, 63, 63, 255, 255, 255, 15, 224,
        159, 255, 199, 255, 56, 240, 63, 0, 252, 63, 31, 240, 255, 255, 15, 254, 159, 255, 135,
        255, 127, 248, 63, 0, 248, 63, 31, 224, 255, 255, 15, 255, 143, 255, 7, 224, 255, 255, 63,
        0, 248, 255, 31, 240, 255, 255, 15, 255, 135, 255, 7, 192, 255, 255, 63, 0, 252, 255, 63,
        240, 254, 207, 159, 255, 195, 255, 7, 192, 255, 255, 127, 0, 255, 255, 255, 112, 252, 135,
        255, 231, 195, 255, 15, 231, 255, 255, 127, 128, 255, 255, 255, 1, 252, 3, 252, 195, 135,
        255, 255, 255, 207, 159, 127, 192, 255, 255, 255, 1, 248, 1, 248, 193, 15, 252, 255, 255,
        129, 15, 120, 192, 255, 227, 255, 0, 240, 1, 48, 128, 31, 248, 255, 255, 0, 7, 120, 128,
        15, 192, 15, 0, 224, 0, 0, 0, 15, 240, 113, 124, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0,
    ]);
